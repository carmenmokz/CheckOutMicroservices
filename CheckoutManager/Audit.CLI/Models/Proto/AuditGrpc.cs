// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: audit.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Auditservice {
  public static partial class AuditService
  {
    static readonly string __ServiceName = "auditservice.AuditService";

    static readonly grpc::Marshaller<global::Auditservice.CreateAuditRequest> __Marshaller_auditservice_CreateAuditRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.CreateAuditRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.CreateAuditResponse> __Marshaller_auditservice_CreateAuditResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.CreateAuditResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.ReadAuditRequest> __Marshaller_auditservice_ReadAuditRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.ReadAuditRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.ReadAuditResponse> __Marshaller_auditservice_ReadAuditResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.ReadAuditResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.ReadAllAuditRequest> __Marshaller_auditservice_ReadAllAuditRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.ReadAllAuditRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.ReadAllAuditResponse> __Marshaller_auditservice_ReadAllAuditResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.ReadAllAuditResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.UpdateAuditRequest> __Marshaller_auditservice_UpdateAuditRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.UpdateAuditRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.UpdateAuditResponse> __Marshaller_auditservice_UpdateAuditResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.UpdateAuditResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.DeleteAuditRequest> __Marshaller_auditservice_DeleteAuditRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.DeleteAuditRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Auditservice.DeleteAuditResponse> __Marshaller_auditservice_DeleteAuditResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Auditservice.DeleteAuditResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Auditservice.CreateAuditRequest, global::Auditservice.CreateAuditResponse> __Method_Create = new grpc::Method<global::Auditservice.CreateAuditRequest, global::Auditservice.CreateAuditResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_auditservice_CreateAuditRequest,
        __Marshaller_auditservice_CreateAuditResponse);

    static readonly grpc::Method<global::Auditservice.ReadAuditRequest, global::Auditservice.ReadAuditResponse> __Method_Read = new grpc::Method<global::Auditservice.ReadAuditRequest, global::Auditservice.ReadAuditResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_auditservice_ReadAuditRequest,
        __Marshaller_auditservice_ReadAuditResponse);

    static readonly grpc::Method<global::Auditservice.ReadAllAuditRequest, global::Auditservice.ReadAllAuditResponse> __Method_ReadAll = new grpc::Method<global::Auditservice.ReadAllAuditRequest, global::Auditservice.ReadAllAuditResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReadAll",
        __Marshaller_auditservice_ReadAllAuditRequest,
        __Marshaller_auditservice_ReadAllAuditResponse);

    static readonly grpc::Method<global::Auditservice.UpdateAuditRequest, global::Auditservice.UpdateAuditResponse> __Method_Update = new grpc::Method<global::Auditservice.UpdateAuditRequest, global::Auditservice.UpdateAuditResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_auditservice_UpdateAuditRequest,
        __Marshaller_auditservice_UpdateAuditResponse);

    static readonly grpc::Method<global::Auditservice.DeleteAuditRequest, global::Auditservice.DeleteAuditResponse> __Method_Delete = new grpc::Method<global::Auditservice.DeleteAuditRequest, global::Auditservice.DeleteAuditResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_auditservice_DeleteAuditRequest,
        __Marshaller_auditservice_DeleteAuditResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Auditservice.AuditReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AuditService</summary>
    [grpc::BindServiceMethod(typeof(AuditService), "BindService")]
    public abstract partial class AuditServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Auditservice.CreateAuditResponse> Create(global::Auditservice.CreateAuditRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Auditservice.ReadAuditResponse> Read(global::Auditservice.ReadAuditRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ReadAll(global::Auditservice.ReadAllAuditRequest request, grpc::IServerStreamWriter<global::Auditservice.ReadAllAuditResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Auditservice.UpdateAuditResponse> Update(global::Auditservice.UpdateAuditRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Auditservice.DeleteAuditResponse> Delete(global::Auditservice.DeleteAuditRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AuditService</summary>
    public partial class AuditServiceClient : grpc::ClientBase<AuditServiceClient>
    {
      /// <summary>Creates a new client for AuditService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuditServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AuditService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuditServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuditServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuditServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Auditservice.CreateAuditResponse Create(global::Auditservice.CreateAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Auditservice.CreateAuditResponse Create(global::Auditservice.CreateAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.CreateAuditResponse> CreateAsync(global::Auditservice.CreateAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.CreateAuditResponse> CreateAsync(global::Auditservice.CreateAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Auditservice.ReadAuditResponse Read(global::Auditservice.ReadAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Auditservice.ReadAuditResponse Read(global::Auditservice.ReadAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.ReadAuditResponse> ReadAsync(global::Auditservice.ReadAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.ReadAuditResponse> ReadAsync(global::Auditservice.ReadAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Auditservice.ReadAllAuditResponse> ReadAll(global::Auditservice.ReadAllAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Auditservice.ReadAllAuditResponse> ReadAll(global::Auditservice.ReadAllAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReadAll, null, options, request);
      }
      public virtual global::Auditservice.UpdateAuditResponse Update(global::Auditservice.UpdateAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Auditservice.UpdateAuditResponse Update(global::Auditservice.UpdateAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.UpdateAuditResponse> UpdateAsync(global::Auditservice.UpdateAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.UpdateAuditResponse> UpdateAsync(global::Auditservice.UpdateAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::Auditservice.DeleteAuditResponse Delete(global::Auditservice.DeleteAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Auditservice.DeleteAuditResponse Delete(global::Auditservice.DeleteAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.DeleteAuditResponse> DeleteAsync(global::Auditservice.DeleteAuditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Auditservice.DeleteAuditResponse> DeleteAsync(global::Auditservice.DeleteAuditRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuditServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuditServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuditServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_ReadAll, serviceImpl.ReadAll)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuditServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Auditservice.CreateAuditRequest, global::Auditservice.CreateAuditResponse>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Auditservice.ReadAuditRequest, global::Auditservice.ReadAuditResponse>(serviceImpl.Read));
      serviceBinder.AddMethod(__Method_ReadAll, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Auditservice.ReadAllAuditRequest, global::Auditservice.ReadAllAuditResponse>(serviceImpl.ReadAll));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Auditservice.UpdateAuditRequest, global::Auditservice.UpdateAuditResponse>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Auditservice.DeleteAuditRequest, global::Auditservice.DeleteAuditResponse>(serviceImpl.Delete));
    }

  }
}
#endregion
